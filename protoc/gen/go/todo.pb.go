// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: todo.proto

// package - определяет пространство имен для предотвращения конфликтов.
// В Go это повлияет на структуру каталогов.

package todopb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Сущность "Задача" (Task).
type Task struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Уникальный идентификатор задачи. Только для чтения.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Заголовок задачи. Обязательное поле.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"` // кароче это аннотация говорит что поле обязательное для заполненияж "Пришло ли значение в это поле?" и вернуть понятную ошибку InvalidArgument, если нет.
	// Описание задачи. Необязательное поле.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Статус задачи.
	Status bool `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	// Срок выполнения задачи.
	DueDate *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`
	// ID пользователя-владельца задачи.
	UserId int64 `protobuf:"varint,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Временные метки создания и обновления. Только для чтения.
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_todo_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_todo_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_todo_proto_rawDescGZIP(), []int{0}
}

func (x *Task) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Task) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Task) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Task) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *Task) GetDueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DueDate
	}
	return nil
}

func (x *Task) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Task) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Task) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type CreateTaskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Сама задача для создания. ID и временные метки игнорируются.
	Task          *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTaskRequest) Reset() {
	*x = CreateTaskRequest{}
	mi := &file_todo_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskRequest) ProtoMessage() {}

func (x *CreateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_todo_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateTaskRequest) Descriptor() ([]byte, []int) {
	return file_todo_proto_rawDescGZIP(), []int{1}
}

func (x *CreateTaskRequest) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type CreateTaskResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Созданная задача с заполненными ID и временными метками.
	Task          *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTaskResponse) Reset() {
	*x = CreateTaskResponse{}
	mi := &file_todo_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskResponse) ProtoMessage() {}

func (x *CreateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_todo_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskResponse.ProtoReflect.Descriptor instead.
func (*CreateTaskResponse) Descriptor() ([]byte, []int) {
	return file_todo_proto_rawDescGZIP(), []int{2}
}

func (x *CreateTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type GetTaskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID задачи, которую нужно получить.
	Id            int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskRequest) Reset() {
	*x = GetTaskRequest{}
	mi := &file_todo_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRequest) ProtoMessage() {}

func (x *GetTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_todo_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRequest.ProtoReflect.Descriptor instead.
func (*GetTaskRequest) Descriptor() ([]byte, []int) {
	return file_todo_proto_rawDescGZIP(), []int{3}
}

func (x *GetTaskRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetTaskRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *Task                  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskResponse) Reset() {
	*x = GetTaskResponse{}
	mi := &file_todo_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskResponse) ProtoMessage() {}

func (x *GetTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_todo_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskResponse.ProtoReflect.Descriptor instead.
func (*GetTaskResponse) Descriptor() ([]byte, []int) {
	return file_todo_proto_rawDescGZIP(), []int{4}
}

func (x *GetTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type ListTasksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Параметры пагинации.
	PageSize  int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken int32 `protobuf:"varint,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"` // Простая реализация - номер страницы.
	// Поля для фильтрации.
	UserId        int64 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // Обязательно фильтровать по пользователю!
	Status        bool  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`               // Опциональный фильтр по статусу.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTasksRequest) Reset() {
	*x = ListTasksRequest{}
	mi := &file_todo_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksRequest) ProtoMessage() {}

func (x *ListTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_todo_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksRequest.ProtoReflect.Descriptor instead.
func (*ListTasksRequest) Descriptor() ([]byte, []int) {
	return file_todo_proto_rawDescGZIP(), []int{5}
}

func (x *ListTasksRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTasksRequest) GetPageToken() int32 {
	if x != nil {
		return x.PageToken
	}
	return 0
}

func (x *ListTasksRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ListTasksRequest) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type ListTasksResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Список задач, подходящих под критерии.
	Tasks []*Task `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	// Токен для получения следующей страницы.
	// В более сложной реализации это может быть строковый токен.
	NextPageToken int32 `protobuf:"varint,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTasksResponse) Reset() {
	*x = ListTasksResponse{}
	mi := &file_todo_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksResponse) ProtoMessage() {}

func (x *ListTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_todo_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksResponse.ProtoReflect.Descriptor instead.
func (*ListTasksResponse) Descriptor() ([]byte, []int) {
	return file_todo_proto_rawDescGZIP(), []int{6}
}

func (x *ListTasksResponse) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *ListTasksResponse) GetNextPageToken() int32 {
	if x != nil {
		return x.NextPageToken
	}
	return 0
}

type UpdateTaskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Задача с обновленными данными. Должен быть указан ID.
	Task          *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTaskRequest) Reset() {
	*x = UpdateTaskRequest{}
	mi := &file_todo_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskRequest) ProtoMessage() {}

func (x *UpdateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_todo_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskRequest.ProtoReflect.Descriptor instead.
func (*UpdateTaskRequest) Descriptor() ([]byte, []int) {
	return file_todo_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateTaskRequest) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type UpdateTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *Task                  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTaskResponse) Reset() {
	*x = UpdateTaskResponse{}
	mi := &file_todo_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskResponse) ProtoMessage() {}

func (x *UpdateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_todo_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskResponse.ProtoReflect.Descriptor instead.
func (*UpdateTaskResponse) Descriptor() ([]byte, []int) {
	return file_todo_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type DeleteTaskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID задачи, которую нужно удалить.
	Id            int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTaskRequest) Reset() {
	*x = DeleteTaskRequest{}
	mi := &file_todo_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTaskRequest) ProtoMessage() {}

func (x *DeleteTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_todo_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteTaskRequest) Descriptor() ([]byte, []int) {
	return file_todo_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteTaskRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteTaskRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type MarkTaskAsDoneRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID задачи, которую нужно отметить как выполненную.
	Id            int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkTaskAsDoneRequest) Reset() {
	*x = MarkTaskAsDoneRequest{}
	mi := &file_todo_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkTaskAsDoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkTaskAsDoneRequest) ProtoMessage() {}

func (x *MarkTaskAsDoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_todo_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkTaskAsDoneRequest.ProtoReflect.Descriptor instead.
func (*MarkTaskAsDoneRequest) Descriptor() ([]byte, []int) {
	return file_todo_proto_rawDescGZIP(), []int{10}
}

func (x *MarkTaskAsDoneRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MarkTaskAsDoneRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type MarkTaskAsDoneResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Обновленная задача со статусом STATUS_COMPLETED.
	Task          *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkTaskAsDoneResponse) Reset() {
	*x = MarkTaskAsDoneResponse{}
	mi := &file_todo_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkTaskAsDoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkTaskAsDoneResponse) ProtoMessage() {}

func (x *MarkTaskAsDoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_todo_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkTaskAsDoneResponse.ProtoReflect.Descriptor instead.
func (*MarkTaskAsDoneResponse) Descriptor() ([]byte, []int) {
	return file_todo_proto_rawDescGZIP(), []int{11}
}

func (x *MarkTaskAsDoneResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

var File_todo_proto protoreflect.FileDescriptor

const file_todo_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"todo.proto\x12\atodo.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1fgoogle/api/field_behavior.proto\"\xb1\x02\n" +
	"\x04Task\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x19\n" +
	"\x05title\x18\x02 \x01(\tB\x03\xe0A\x02R\x05title\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x16\n" +
	"\x06status\x18\x04 \x01(\bR\x06status\x125\n" +
	"\bdue_date\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\adueDate\x12\x17\n" +
	"\auser_id\x18\x06 \x01(\x03R\x06userId\x129\n" +
	"\n" +
	"created_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\";\n" +
	"\x11CreateTaskRequest\x12&\n" +
	"\x04task\x18\x01 \x01(\v2\r.todo.v1.TaskB\x03\xe0A\x02R\x04task\"7\n" +
	"\x12CreateTaskResponse\x12!\n" +
	"\x04task\x18\x01 \x01(\v2\r.todo.v1.TaskR\x04task\"C\n" +
	"\x0eGetTaskRequest\x12\x13\n" +
	"\x02id\x18\x01 \x01(\x03B\x03\xe0A\x02R\x02id\x12\x1c\n" +
	"\auser_id\x18\x02 \x01(\x03B\x03\xe0A\x02R\x06userId\"4\n" +
	"\x0fGetTaskResponse\x12!\n" +
	"\x04task\x18\x01 \x01(\v2\r.todo.v1.TaskR\x04task\"\x7f\n" +
	"\x10ListTasksRequest\x12\x1b\n" +
	"\tpage_size\x18\x01 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x02 \x01(\x05R\tpageToken\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\x03R\x06userId\x12\x16\n" +
	"\x06status\x18\x04 \x01(\bR\x06status\"`\n" +
	"\x11ListTasksResponse\x12#\n" +
	"\x05tasks\x18\x01 \x03(\v2\r.todo.v1.TaskR\x05tasks\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\x05R\rnextPageToken\";\n" +
	"\x11UpdateTaskRequest\x12&\n" +
	"\x04task\x18\x01 \x01(\v2\r.todo.v1.TaskB\x03\xe0A\x02R\x04task\"7\n" +
	"\x12UpdateTaskResponse\x12!\n" +
	"\x04task\x18\x01 \x01(\v2\r.todo.v1.TaskR\x04task\"F\n" +
	"\x11DeleteTaskRequest\x12\x13\n" +
	"\x02id\x18\x01 \x01(\x03B\x03\xe0A\x02R\x02id\x12\x1c\n" +
	"\auser_id\x18\x02 \x01(\x03B\x03\xe0A\x02R\x06userId\"J\n" +
	"\x15MarkTaskAsDoneRequest\x12\x13\n" +
	"\x02id\x18\x01 \x01(\x03B\x03\xe0A\x02R\x02id\x12\x1c\n" +
	"\auser_id\x18\x02 \x01(\x03B\x03\xe0A\x02R\x06userId\";\n" +
	"\x16MarkTaskAsDoneResponse\x12!\n" +
	"\x04task\x18\x01 \x01(\v2\r.todo.v1.TaskR\x04task2\xbe\x03\n" +
	"\vTaskService\x12G\n" +
	"\n" +
	"CreateTask\x12\x1a.todo.v1.CreateTaskRequest\x1a\x1b.todo.v1.CreateTaskResponse\"\x00\x12>\n" +
	"\aGetTask\x12\x17.todo.v1.GetTaskRequest\x1a\x18.todo.v1.GetTaskResponse\"\x00\x12D\n" +
	"\tListTasks\x12\x19.todo.v1.ListTasksRequest\x1a\x1a.todo.v1.ListTasksResponse\"\x00\x12G\n" +
	"\n" +
	"UpdateTask\x12\x1a.todo.v1.UpdateTaskRequest\x1a\x1b.todo.v1.UpdateTaskResponse\"\x00\x12B\n" +
	"\n" +
	"DeleteTask\x12\x1a.todo.v1.DeleteTaskRequest\x1a\x16.google.protobuf.Empty\"\x00\x12S\n" +
	"\x0eMarkTaskAsDone\x12\x1e.todo.v1.MarkTaskAsDoneRequest\x1a\x1f.todo.v1.MarkTaskAsDoneResponse\"\x00B$Z\"github.com/k3mpton/ToDoList;todopbb\x06proto3"

var (
	file_todo_proto_rawDescOnce sync.Once
	file_todo_proto_rawDescData []byte
)

func file_todo_proto_rawDescGZIP() []byte {
	file_todo_proto_rawDescOnce.Do(func() {
		file_todo_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_todo_proto_rawDesc), len(file_todo_proto_rawDesc)))
	})
	return file_todo_proto_rawDescData
}

var file_todo_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_todo_proto_goTypes = []any{
	(*Task)(nil),                   // 0: todo.v1.Task
	(*CreateTaskRequest)(nil),      // 1: todo.v1.CreateTaskRequest
	(*CreateTaskResponse)(nil),     // 2: todo.v1.CreateTaskResponse
	(*GetTaskRequest)(nil),         // 3: todo.v1.GetTaskRequest
	(*GetTaskResponse)(nil),        // 4: todo.v1.GetTaskResponse
	(*ListTasksRequest)(nil),       // 5: todo.v1.ListTasksRequest
	(*ListTasksResponse)(nil),      // 6: todo.v1.ListTasksResponse
	(*UpdateTaskRequest)(nil),      // 7: todo.v1.UpdateTaskRequest
	(*UpdateTaskResponse)(nil),     // 8: todo.v1.UpdateTaskResponse
	(*DeleteTaskRequest)(nil),      // 9: todo.v1.DeleteTaskRequest
	(*MarkTaskAsDoneRequest)(nil),  // 10: todo.v1.MarkTaskAsDoneRequest
	(*MarkTaskAsDoneResponse)(nil), // 11: todo.v1.MarkTaskAsDoneResponse
	(*timestamppb.Timestamp)(nil),  // 12: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),          // 13: google.protobuf.Empty
}
var file_todo_proto_depIdxs = []int32{
	12, // 0: todo.v1.Task.due_date:type_name -> google.protobuf.Timestamp
	12, // 1: todo.v1.Task.created_at:type_name -> google.protobuf.Timestamp
	12, // 2: todo.v1.Task.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 3: todo.v1.CreateTaskRequest.task:type_name -> todo.v1.Task
	0,  // 4: todo.v1.CreateTaskResponse.task:type_name -> todo.v1.Task
	0,  // 5: todo.v1.GetTaskResponse.task:type_name -> todo.v1.Task
	0,  // 6: todo.v1.ListTasksResponse.tasks:type_name -> todo.v1.Task
	0,  // 7: todo.v1.UpdateTaskRequest.task:type_name -> todo.v1.Task
	0,  // 8: todo.v1.UpdateTaskResponse.task:type_name -> todo.v1.Task
	0,  // 9: todo.v1.MarkTaskAsDoneResponse.task:type_name -> todo.v1.Task
	1,  // 10: todo.v1.TaskService.CreateTask:input_type -> todo.v1.CreateTaskRequest
	3,  // 11: todo.v1.TaskService.GetTask:input_type -> todo.v1.GetTaskRequest
	5,  // 12: todo.v1.TaskService.ListTasks:input_type -> todo.v1.ListTasksRequest
	7,  // 13: todo.v1.TaskService.UpdateTask:input_type -> todo.v1.UpdateTaskRequest
	9,  // 14: todo.v1.TaskService.DeleteTask:input_type -> todo.v1.DeleteTaskRequest
	10, // 15: todo.v1.TaskService.MarkTaskAsDone:input_type -> todo.v1.MarkTaskAsDoneRequest
	2,  // 16: todo.v1.TaskService.CreateTask:output_type -> todo.v1.CreateTaskResponse
	4,  // 17: todo.v1.TaskService.GetTask:output_type -> todo.v1.GetTaskResponse
	6,  // 18: todo.v1.TaskService.ListTasks:output_type -> todo.v1.ListTasksResponse
	8,  // 19: todo.v1.TaskService.UpdateTask:output_type -> todo.v1.UpdateTaskResponse
	13, // 20: todo.v1.TaskService.DeleteTask:output_type -> google.protobuf.Empty
	11, // 21: todo.v1.TaskService.MarkTaskAsDone:output_type -> todo.v1.MarkTaskAsDoneResponse
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_todo_proto_init() }
func file_todo_proto_init() {
	if File_todo_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_todo_proto_rawDesc), len(file_todo_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_todo_proto_goTypes,
		DependencyIndexes: file_todo_proto_depIdxs,
		MessageInfos:      file_todo_proto_msgTypes,
	}.Build()
	File_todo_proto = out.File
	file_todo_proto_goTypes = nil
	file_todo_proto_depIdxs = nil
}
